package com.meest.videomvvmmodule.view.home;import static android.Manifest.permission.ACCESS_FINE_LOCATION;import static android.Manifest.permission.READ_PHONE_STATE;import static android.content.Context.DOWNLOAD_SERVICE;import static com.meest.videomvvmmodule.viewmodel.ProfileViewModel.followUnfollow;import android.Manifest;import android.app.DownloadManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.Settings;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import androidx.activity.result.ActivityResultLauncher;import androidx.activity.result.contract.ActivityResultContracts;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.core.content.res.ResourcesCompat;import androidx.databinding.DataBindingUtil;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProvider;import androidx.recyclerview.widget.PagerSnapHelper;import androidx.recyclerview.widget.SnapHelper;import com.danikula.videocache.HttpProxyCacheServer;import com.google.android.exoplayer2.DefaultLoadControl;import com.google.android.exoplayer2.LoadControl;import com.google.android.exoplayer2.Player;import com.google.android.exoplayer2.SimpleExoPlayer;import com.google.android.exoplayer2.source.MediaSource;import com.google.android.exoplayer2.source.ProgressiveMediaSource;import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;import com.google.android.exoplayer2.upstream.DataSource;import com.google.android.exoplayer2.upstream.DefaultAllocator;import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;import com.google.android.exoplayer2.util.Util;import com.google.gson.Gson;import com.meest.Meeast;import com.meest.R;import com.meest.databinding.FragmentForUBinding;import com.meest.databinding.ItemVideoListBinding;import com.meest.meestbhart.utilss.SharedPrefreances;import com.meest.videomvvmmodule.adapter.VideoFullAdapter;import com.meest.videomvvmmodule.adapter.VideoPagerAdapter;import com.meest.videomvvmmodule.model.videos.Video;import com.meest.videomvvmmodule.utils.Const;import com.meest.videomvvmmodule.utils.CustomDialogBuilder;import com.meest.videomvvmmodule.utils.Global;import com.meest.videomvvmmodule.utils.SessionManager;import com.meest.videomvvmmodule.view.base.BaseFragment;import com.meest.videomvvmmodule.view.recordvideo.Utilss;import com.meest.videomvvmmodule.view.search.FetchUserActivity;import com.meest.videomvvmmodule.view.search.HashTagActivity;import com.meest.videomvvmmodule.view.share.ShareSheetFragment;import com.meest.videomvvmmodule.view.video.PlayerActivity;import com.meest.videomvvmmodule.view.wallet.WalletActivity;import com.meest.videomvvmmodule.viewmodel.ForUViewModel;import com.meest.videomvvmmodule.viewmodel.HomeViewModel;import com.meest.videomvvmmodule.viewmodel.MainViewModel;import org.jetbrains.annotations.NotNull;import java.io.File;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import java.util.Objects;import java.util.Random;public class ForUFragment extends BaseFragment implements Player.EventListener {    private static final int PERMISSION_REQUEST_CODE = 200;    GpsTracker gpsTracker;    private VideoPagerAdapter adapter;    String format;    SimpleExoPlayer player;    private FragmentForUBinding binding;    private ForUViewModel viewModel;    private HomeViewModel parentViewModel;    private MainViewModel mainViewModel;    SimpleExoPlayer cachePlayer;    int count;    BroadcastReceiver receiver;    private DownloadManager downloadManager;    private CustomDialogBuilder customDialogBuilder;    private String y;    private ActivityResultLauncher<String> requestPermissionLauncher;    public static ForUFragment getNewInstance(String type) {        ForUFragment fragment = new ForUFragment();        Bundle bundle = new Bundle();        bundle.putString("type", type);        fragment.setArguments(bundle);        return fragment;    }    @Override    public View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_for_u, container, false);        format = new SimpleDateFormat("_HHmmss", Locale.US).format(new Date());        requestPermissionLauncher =                registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {                    if (isGranted) {//                        binding.llDuet.performClick();                    } else {                        // Explain to the user that the feature is unavailable because the                        // features requires a permission that the user has denied. At the                        // same time, respect the user's decision. Don't link to system                        // settings in an effort to convince the user to change their                        // decision.                    }                });        return binding.getRoot();    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        if (getActivity() != null) {            parentViewModel = new ViewModelProvider(getActivity()).get(HomeViewModel.class);            mainViewModel = new ViewModelProvider(getActivity()).get(MainViewModel.class);        }        viewModel = new ViewModelProvider(this).get(ForUViewModel.class);        viewModel.deepLinkId = SharedPrefreances.getSharedPreferenceString(getActivity(), SharedPrefreances.GETINTENT_VIDEO);        try {            if (ContextCompat.checkSelfPermission(getActivity().getApplicationContext(), android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(getActivity(), new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION}, 101);            }        } catch (Exception e) {            e.printStackTrace();        }        mCheckPermission();        initView();        initListeners();        initObserve();        binding.setViewmodel(viewModel);        viewModel.sessionManager = sessionManager;        registerReceiverDownloadManager();//        viewModel.isEmpty.observe(getViewLifecycleOwner(), aBoolean -> {//            if (!aBoolean) {//                binding.shimmerViewContainer.stopShimmer();//                binding.shimmerViewContainer.setVisibility(View.GONE);//            }//        });    }    private void registerReceiverDownloadManager() {        downloadManager = (DownloadManager) requireActivity().getSystemService(DOWNLOAD_SERVICE);        receiver = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                String action = intent.getAction();                if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(action)) {                    DownloadManager.Query query = new DownloadManager.Query();                    query.setFilterById(Utilss.enqueue);                    Cursor c = downloadManager.query(query);                    if (c.moveToFirst()) {                        int columnIndex = c                                .getColumnIndex(DownloadManager.COLUMN_STATUS);                        if (DownloadManager.STATUS_SUCCESSFUL == c.getInt(columnIndex)) {                            Toast.makeText(getContext(), getString(R.string.video_download), Toast.LENGTH_SHORT).show();                        } else {                            Toast.makeText(getContext(), getResources().getString(R.string.Something_went_wrong), Toast.LENGTH_SHORT).show();                        }                    }                }            }        };        requireActivity().registerReceiver(receiver, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));    }    int i = 1;    private void mCheckPermission() {        if (ContextCompat.checkSelfPermission(requireContext(), ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(requireActivity(), new String[]{ACCESS_FINE_LOCATION, READ_PHONE_STATE}, PERMISSION_REQUEST_CODE);        }    }    private void initView() {        viewModel.forUBinding = binding;        customDialogBuilder = new CustomDialogBuilder(getContext());        if (!SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GETINTENT_USER).isEmpty()) {            Intent intent = new Intent(getContext(), FetchUserActivity.class);            intent.putExtra("userid", SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GETINTENT_USER));            startActivity(intent);        }        if (!SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_USER).isEmpty()) {            Intent intent = new Intent(getContext(), FetchUserActivity.class);            intent.putExtra("userid", SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_USER));            SharedPrefreances.setSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_USER, "");            startActivity(intent);        }        if (!SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_VIDEO).isEmpty()) {            Intent intent = new Intent(binding.getRoot().getContext(), PlayerActivity.class);            intent.putExtra("postId", SharedPrefreances.getSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_VIDEO));            intent.putExtra("isSingleVideo", true);            SharedPrefreances.setSharedPreferenceString(requireContext(), SharedPrefreances.GET_NOTIFICATION_INTENT_VIDEO, "");            startActivity(intent);        }        adapter = new VideoPagerAdapter(this, () -> viewModel.onLoadMore(), new VideoFullAdapter.OnRecyclerViewItemClick() {            @Override            public void onItemClick(Video.Data model, int itemType, ItemVideoListBinding binding, int position, SimpleExoPlayer player) {                switch (itemType) {                    // Send to FetchUser Activity                    case 1:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            Intent intent = new Intent(getContext(), FetchUserActivity.class);                            intent.putExtra("userid", model.getUserId());                            startActivity(intent);                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    // Play/Pause video                    case 2:                        if (ForUFragment.this.player != null) {                            ForUFragment.this.player.setPlayWhenReady(!ForUFragment.this.player.isPlaying());                        }                        break;                    // Send Bubble to creator                    case 3:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            showSendBubblePopUp(model.getUserId());                        } else {                            Utilss.callLoginSign(getContext());                        }//                        if (!Global.accessToken.isEmpty()) {//                        } else {//                            if (getActivity() != null && getActivity() instanceof MainVideoActivity) {//                                ((MainVideoActivity) getActivity()).initLogin(getActivity(), () -> showSendBubblePopUp(model.getUserId()));//                            }//                        }                        break;                    // On like btn click                    case 4:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            viewModel.likeUnlikePost(model.getPostId(), getContext(), model, binding, position, viewModel.onDataLoad);                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    // On Comment Click                    case 5:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            CommentSheetFragment fragment = new CommentSheetFragment();                            fragment.setOnDismissListener(count -> {                                model.setPostCommentsCount(count);//                                Objects.requireNonNull(viewModel.onDataLoad.getValue()).set(position, model);                                Objects.requireNonNull(viewModel.onDataLoad.getValue()).set(position, model);                                binding.tvCommentCount.setText(Global.prettyCount(count));                            });                            Bundle args = new Bundle();                            args.putString("postid", model.getPostId());                            args.putInt("commentCount", model.getPostCommentsCount());                            fragment.setArguments(args);                            fragment.show(getChildFragmentManager(), fragment.getClass().getSimpleName());                        } else {                            Utilss.callLoginSign(getContext());                        }//                        Intent intentComment = new Intent(getContext(), VideoCommentActivity.class);//                        bindingCommentCount = binding;//                        if(viewModel.commentCount>model.getPostCommentsCount()){//                            intentComment.putExtra("commentCount", viewModel.commentCount);//                        }else{//                            intentComment.putExtra("commentCount", model.getPostCommentsCount());//                        }//                        intentComment.putExtra("videoId", model.getPostId());//                        startActivityForResult(intentComment, 101);//                        isFABOpen = false;//                        viewModel.closeFABMenu(binding);                        break;                    // On Share Click                    case 6:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED                                    || ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                                if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED &&                                        ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {                                    customDialogBuilder.showPermissionDialog(ResourcesCompat.getDrawable(getResources(), R.drawable.ic_storage_permission, null), getContext().getResources().getString(R.string.share_storage_denied),                                            getContext().getResources().getString(R.string.not_now), getContext().getResources().getString(R.string.setting), new CustomDialogBuilder.OnDismissListener() {                                                @Override                                                public void onPositiveDismiss() {                                                    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                                                    Uri uri = Uri.fromParts("package", getContext().getPackageName(), null);                                                    intent.setData(uri);                                                    startActivity(intent);                                                }                                                @Override                                                public void onNegativeDismiss() {                                                }                                            });                                } else {                                    customDialogBuilder.showPermissionDialog(ResourcesCompat.getDrawable(getResources(), R.drawable.ic_storage_permission, null), getContext().getResources().getString(R.string.share_storage),                                            getContext().getResources().getString(R.string.not_now), getContext().getResources().getString(R.string.continuee), new CustomDialogBuilder.OnDismissListener() {                                                @Override                                                public void onPositiveDismiss() {                                                    requestPermissionLauncher.launch(                                                            Manifest.permission.WRITE_EXTERNAL_STORAGE);                                                    requestPermissionLauncher.launch(                                                            Manifest.permission.READ_EXTERNAL_STORAGE);                                                }                                                @Override                                                public void onNegativeDismiss() {                                                }                                            });                                }                            } else {                                handleShareClick(model, position, binding);                            }                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    // On Sound Disk Click                    case 7:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            Intent intent1 = new Intent(getContext(), SoundVideosActivity.class);                            intent1.putExtra("soundid", model.getSoundId());                            intent1.putExtra("sound", model.getSound());                            startActivity(intent1);                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    case 8:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            new CustomDialogBuilder(getContext()).showSimpleDialog(getString(R.string.Report_this_post), getString(R.string.Are_you_sure_you_want_to_report_this_post), getString(R.string.cancel), getString(R.string.Yes_Report), new CustomDialogBuilder.OnDismissListener() {                                @Override                                public void onPositiveDismiss() {                                    if (player != null) {                                        player.setPlayWhenReady(false);                                        if (player.getPlayWhenReady()) {                                            binding.ivPause.setVisibility(View.GONE);                                        } else {                                            binding.ivPause.setVisibility(View.VISIBLE);                                        }                                    }                                    reportPost(model);                                }                                @Override                                public void onNegativeDismiss() {                                    if (player != null) {                                        player.setPlayWhenReady(true);                                        if (player.getPlayWhenReady()) {                                            binding.ivPause.setVisibility(View.GONE);                                        } else {                                            binding.ivPause.setVisibility(View.VISIBLE);                                        }                                    }                                }                            });                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    case 9://                        follow unfollow button                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            viewModel.followUnfollow(model, getContext(), binding, adapter, position);                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    case 11:                        if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                            OptionsSheetFragment fragment = new OptionsSheetFragment(binding.ivPause, player, model, getContext(), true);//                            OptionsSheetFragment fragment = new OptionsSheetFragment();                            Bundle args = new Bundle();                            args.putString("postid", model.getPostId());                            args.putInt("reporttype", 1);                            args.putString("userid", model.getUserId());                            args.putString("videoPath", model.getPostVideo());                            args.putString("audioPath", model.getSound());                            args.putString("soundId", model.getSoundId());                            args.putInt("canDuet", model.getCanDuet());                            args.putInt("canSave", model.getCanSave());                            args.putString("videoThumbnail", model.getThumbnail_image());                            fragment.setArguments(args);                            fragment.show(getChildFragmentManager(), fragment.getClass().getSimpleName());                        } else {                            Utilss.callLoginSign(getContext());                        }                        break;                    case 12://                        isFABOpen = false;//                        viewModel.closeFABMenu(binding);                        break;                    case 13:                        viewModel.addView(model, binding);                        break;                }            }            @Override            public void onHashTagClick(String hashTag) {                if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                    Intent intent = new Intent(getContext(), HashTagActivity.class);                    intent.putExtra("hashtag", hashTag);                    startActivity(intent);                } else {                    Utilss.callLoginSign(getContext());                }            }            @Override            public void onDoubleClick(Video.Data model, MotionEvent event, ItemVideoListBinding binding) {                if (new SessionManager(requireContext()).getBooleanValue(Const.IS_LOGIN)) {                    if (!model.getVideoIsLiked()) {                        binding.likebtn.performClick();                    }                    showHeart(event, binding);                } else {                    Utilss.callLoginSign(getContext());                }            }        });        binding.viewPager.setAdapter(adapter);        SnapHelper snapHelper1 = new PagerSnapHelper();        snapHelper1.attachToRecyclerView(binding.popularRecyclerview);        if (getArguments() != null) {            viewModel.type = getArguments().getString("type");            count = getArguments().getInt("count");            if (viewModel.type != null && viewModel.type.equals("1")) {                viewModel.postType = "abc";//                viewModel.postType = "related";            } else if (viewModel.type != null && viewModel.type.equals("2")) {                viewModel.postType = "nearby";            } else {                viewModel.postType = "following";                viewModel.isFollowingFragment.set(true);            }            viewModel.start = 0;            viewModel.fetchPostVideos(false, binding);        }    }//    private void handleShareClick(Video.Data model) {//        ProgressDialog dialog = ProgressDialog.show(getContext(), "", "Please wait...", true);//        dialog.setCancelable(false);//        FirebaseDynamicLinks.getInstance().createDynamicLink()//                .setLink(Uri.parse("https://www.meest4bharat.com/?video=" + model.getPostId()))//                .setDomainUriPrefix(Const.deepLinkingUriPrefix)//                // Open links with this app on Android//                .setAndroidParameters(new DynamicLink.AndroidParameters.Builder().build())//                // Open links with com.example.ios on iOS//                .setIosParameters(new DynamicLink.IosParameters.Builder(Const.iosBundleId).build())//                .buildShortDynamicLink()//                .addOnFailureListener(e -> {//                })//                .addOnCompleteListener(task -> {//                    dialog.dismiss();//                    if (task.isSuccessful()) {//                        Intent share = new Intent(Intent.ACTION_SEND);//                        String shareBody = getString(R.string.Watch_more_of_such) + task.getResult().getShortLink();//                        share.setType("text/plain");//                        share.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.Share_Video));//                        share.putExtra(Intent.EXTRA_TEXT, shareBody);//                        startActivity(Intent.createChooser(share, getString(R.string.Share_Video)));//                    } else {//                        Toast.makeText(getContext(), getString(R.string.Error_Creating_Link), Toast.LENGTH_SHORT).show();//                    }//                });//    }    private void initListeners() {       /* viewModel.famousAdapter.setOnRecyclerViewItemClick((model, position, binding, type) -> {            if (type == 1) {                if (parentViewModel.onPageSelect.getValue() != null && parentViewModel.onPageSelect.getValue() == Integer.parseInt(ForUFragment.this.type)) {                    lastPosition = position;//                    playVideo(Const.ITEM_BASE_URL + model.getPostVideo(), binding);                    playVideo(model.getPostVideo(), binding);                }            } else {                Intent intent = new Intent(getContext(), FetchUserActivity.class);                intent.putExtra("userid", model.getUserId());                startActivity(intent);            }        });*/     /*   binding.popularRecyclerview.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);                if (newState == RecyclerView.SCROLL_STATE_IDLE) {                    int position = layoutManager1.findFirstCompletelyVisibleItemPosition();                    View view = binding.popularRecyclerview.getLayoutManager().findViewByPosition(position);                    if (!(position <= -1) && lastPosition != position) {                        Log.e("====apiCall","mayank");                        if (binding.popularRecyclerview.getLayoutManager() != null) {                            if (view != null) {                                lastPosition = position;                                ItemFamousCreatorBinding binding1 = DataBindingUtil.bind(view);                                playVideo(viewModel.famousAdapter.getmList().get(position).getPostVideo(), binding1);                            }                        }                    }                }            }        });*///        binding.refreshlout.setOnLoadMoreListener(refreshLayout -> viewModel.onLoadMore());    }    public void showHeart(MotionEvent e, ItemVideoListBinding binding) {        int x = (int) e.getX() - 200;        int y = (int) e.getY() - 200;        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);        final ImageView iv = new ImageView(getActivity());        lp.setMargins(x, y, 0, 0);        iv.setLayoutParams(lp);        Random r = new Random();        int i1 = r.nextInt(30 + 30) - 30;        iv.setRotation(i1);        iv.setImageResource(R.drawable.double_tap);        if (binding.rtl.getChildCount() > 0) {            binding.rtl.removeAllViews();        }        binding.rtl.addView(iv);        Animation fadeoutani = AnimationUtils.loadAnimation(getActivity(), android.R.anim.fade_out);        fadeoutani.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                binding.rtl.removeView(iv);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        iv.startAnimation(fadeoutani);    }    private void initObserve() {        viewModel.context = requireContext();        binding.doneButton.setOnClickListener(v -> {            if (viewModel.famousAdapter.getCount() > 0) {                viewModel.start = 0;                adapter.getDataList().clear();                adapter.notifyDataSetChanged();                viewModel.fetchPostVideos(true, binding);            } else                Toast.makeText(requireContext(), "Please follow at least one user.", Toast.LENGTH_SHORT).show();        });        viewModel.onDataLoad.observe(getViewLifecycleOwner(), data -> {            if (data != null && !data.isEmpty()) {                if (adapter.getDataList().isEmpty() || !viewModel.isLoadMore) {                    adapter.updateData(data);                    binding.viewPager.setAdapter(adapter);                } else {                    adapter.loadMore(data);                }            }        });        if (checkLocation()) {            mainViewModel.selectedPosition.observe(getViewLifecycleOwner(), position -> {                if (position != null && position == 0) {                    if (!Utilss.postId.equals("")) {                        viewModel.deepLinkId = Utilss.postId;                        Utilss.postId = "";                    } else {                        viewModel.deepLinkId = "";                    }                }            });        } else {            mainViewModel.selectedPosition.observe(getViewLifecycleOwner(), position -> {                if (position != null && position == 0) {                    viewModel.post_lat = 0.0d;                    viewModel.post_lng = 0.0d;                    if (!Utilss.postId.equals("")) {                        viewModel.deepLinkId = Utilss.postId;                        Utilss.postId = "";                    } else {                        viewModel.deepLinkId = "";                    }                }            });        }        parentViewModel.scroll.observe(getViewLifecycleOwner(), integer ->                binding.viewPager.setCurrentItem(0, false)        );        binding.viewPager.setOffscreenPageLimit(1);//        binding.viewPager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {//            @Override//            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {//                super.onPageScrolled(position, positionOffset, positionOffsetPixels);//                Log.e("TAG","================================================="+"onPageScrolled");//                viewModel.addView(viewModel.adapter.getmList(),position,bindingCommentCount);//                Log.e("TAG","================================================="+"onPageScrolled_after");//            }////            @Override//            public void onPageSelected(int position) {//                super.onPageSelected(position);//                Log.e("TAG","======================================"+"onPageSelected");//            }////            @Override//            public void onPageScrollStateChanged(int state) {//                super.onPageScrollStateChanged(state);//                Log.e("TAG","======================================"+"onPageScrollStateChanged");//            }////        });/*        binding.viewPager.setOnScrollChangeListener(new View.OnScrollChangeListener() {            @Override            public void onScrollChange(View v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {            }        });*/        parentViewModel.onRefresh.observe(getViewLifecycleOwner(), aBoolean -> {            if (aBoolean != null && aBoolean) {                viewModel.deepLinkId = "";                viewModel.start = 0;                viewModel.fetchPostVideos(false, binding);            }        });        parentViewModel.onStop.observe(getViewLifecycleOwner(), onStop -> {            if (onStop != null) {                if (parentViewModel.onPageSelect.getValue() != null && parentViewModel.onPageSelect.getValue() == Integer.parseInt(viewModel.type) && player != null) {                    player.setPlayWhenReady(!onStop);                }            }        });//        viewModel.onCacheComplete.observe(getViewLifecycleOwner(), onLoadMore -> {//            if (onLoadMore != null && onLoadMore) {//                callCache();//                Log.e("TAG", "initObserve: cache call");//            }//        });        viewModel.onLoadMoreComplete.observe(getViewLifecycleOwner(), onLoadMore -> {            if (onLoadMore != null && onLoadMore) {//                binding.refreshlout.setRefreshing(false);                parentViewModel.onRefresh.setValue(false);            }//            parentViewModel.isShowLoaderInHome.setValue(!onLoadMore);        });        viewModel.isEmpty.observe(getViewLifecycleOwner(), isEmpty -> {            if (isEmpty) {                if (viewModel.postType.equalsIgnoreCase("following")) {                    binding.loutPopular.setVisibility(View.VISIBLE);                    viewModel.reloadSuggestions();                } else {                    binding.loutPopular.setVisibility(View.GONE);                }                binding.viewPager.setVisibility(View.GONE);            } else {                binding.loutPopular.setVisibility(View.GONE);                binding.viewPager.setVisibility(View.VISIBLE);            }        });        viewModel.coinSend.observe(getViewLifecycleOwner(), coinSend -> showSendResult(coinSend.getStatus()));//        if (!type.equals("" + viewModel.followUnfollow)) {//            Log.e("TAG", "initView: "+"folllow_work" );//            viewModel.postType=type;//            viewModel.fetchPostVideos(false, binding);//        } else {//            Log.e("TAG", "initView: " + "folllow_work_not");//            viewModel.fetchPostVideos(false, binding);//        }        viewModel.followUnfollow.observe(getViewLifecycleOwner(), new Observer<Boolean>() {            @Override            public void onChanged(Boolean isFollowed) {                if (viewModel.type.equals("0"))                    if (isFollowed) {                        Log.e("TAG", "initView: " + "folllow_work");                        viewModel.start = 0;                        viewModel.fetchPostVideos(false, binding);                    } else {                        Log.e("TAG", "initView: " + "folllow_work_not");                    }            }        });        if (followUnfollow != null) {            followUnfollow.observe(getViewLifecycleOwner(), new Observer<Boolean>() {                @Override                public void onChanged(Boolean isFollowed) {                    if (viewModel.type.equals("0"))                        if (isFollowed) {                            Log.e("TAG", "initView: " + "folllow_work");                            viewModel.start = 0;                            viewModel.fetchPostVideos(false, binding);                        } else {                            Log.e("TAG", "initView: " + "folllow_work_not");                        }                }            });        }    }    private void showSendResult(boolean success) {        if (success) {            new CustomDialogBuilder(getContext()).showSendDiamondConfirm(success, viewModel.sendDiamond);            return;        }        new CustomDialogBuilder(getContext()).showSendCoinResultDialogue(success, success1 -> {            if (!success1) {                Intent intent = new Intent(getContext(), WalletActivity.class);                intent.putExtra("openCoin", true);                startActivity(intent);            }        });    }    private void reportPost(Video.Data model) {        ReportSheetFragment fragment = new ReportSheetFragment();        Bundle args = new Bundle();        args.putString("postid", model.getPostId());        args.putInt("reporttype", 1);        args.putString("userid", Global.userId);        fragment.setArguments(args);        fragment.show(getChildFragmentManager(), fragment.getClass().getSimpleName());    }//    private void playVideo(String videoUrl, ItemFamousCreatorBinding binding) {//        if (player != null) {//            player.removeListener(this);//            player.setPlayWhenReady(false);//            player.release();//        }//        if (binding2 != null) {//            // run scale animation and make it smaller//            Animation anim = AnimationUtils.loadAnimation(binding2.getRoot().getContext(), R.anim.scale_out_tv);//            binding2.getRoot().startAnimation(anim);//            anim.setFillAfter(true);//        }//        binding2 = binding;//        // run scale animation and make it bigger//        Animation anim = AnimationUtils.loadAnimation(binding.getRoot().getContext(), R.anim.scale_in_tv);//        binding.getRoot().startAnimation(anim);//        anim.setFillAfter(true);//        if (getActivity() != null) {//            DefaultLoadControl loadControl = new DefaultLoadControl.Builder().setBufferDurationsMs//                    (minBufTime,//                            maxBufTime,//                            buffForPlayTime,//                            buffForPlayAfterTime//                    )//                    .createDefaultLoadControl();//            player = ExoPlayerFactory.newSimpleInstance(getActivity(), new DefaultTrackSelector(), loadControl);////            player = new SimpleExoPlayer.Builder(getActivity()).build();//            simpleCache = Meeast.simpleCache;//            cacheDataSourceFactory = new CacheDataSourceFactory(simpleCache, new DefaultHttpDataSourceFactory(Util.getUserAgent(getActivity(), "tintin"))//                    , CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR);////            ProgressiveMediaSource progressiveMediaSource = new ProgressiveMediaSource.Factory(cacheDataSourceFactory).createMediaSource(Uri.parse(videoUrl));//            binding.playerView.setPlayer(player);//            player.setPlayWhenReady(true);//            player.seekTo(0, 0);//            player.setRepeatMode(Player.REPEAT_MODE_ALL);//            currentVolume = player.getVolume();//            player.addListener(this);//            binding.playerView.setResizeMode(AspectRatioFrameLayout.RESIZE_MODE_FIXED_WIDTH);//            player.prepare(progressiveMediaSource, true, false);//        }//    }    private void showSendBubblePopUp(String userId) {        new CustomDialogBuilder(getContext()).showSendCoinDialogue(new CustomDialogBuilder.OnCoinDismissListener() {            @Override            public void onCancelDismiss() {            }            @Override            public void on20Dismiss() {                viewModel.sendDiamond = "20";                viewModel.sendBubble(userId, "20");            }            @Override            public void on40Dismiss() {                viewModel.sendDiamond = "40";                viewModel.sendBubble(userId, "40");            }            @Override            public void on80Dismiss() {                viewModel.sendDiamond = "80";                viewModel.sendBubble(userId, "80");            }            @Override            public void on100Dismiss() {                viewModel.sendDiamond = "100";                viewModel.sendBubble(userId, "100");            }        });    }    private void callCache() {        if (cachePlayer != null) {            cachePlayer.release();        }        if (getActivity() != null && i < viewModel.adapter.getmList().size() && viewModel.adapter.getmList().get(i) != null) {            String url = "";            if (viewModel.adapter.getmList().get(i).getPostVideo() != null && !viewModel.adapter.getmList().get(i).getPostVideo().isEmpty()) {                url = viewModel.adapter.getmList().get(i).getPostVideo();            } else {                i++;                if (i < viewModel.adapter.getmList().size() && viewModel.adapter.getmList().get(i) != null) {                    url = viewModel.adapter.getmList().get(i).getPostVideo();                }            }            if (cachePlayer != null)                cachePlayer.release();            HttpProxyCacheServer proxy = Meeast.getProxy(getActivity());            String proxyUrl = proxy.getProxyUrl(url);            LoadControl loadControl = new DefaultLoadControl.Builder()                    .setAllocator(new DefaultAllocator(true, 16))                    .setBufferDurationsMs(1024, 1024, 500, 1024)                    .setTargetBufferBytes(-1)                    .setPrioritizeTimeOverSizeThresholds(true)                    .createDefaultLoadControl();            DefaultTrackSelector trackSelector = new DefaultTrackSelector(requireContext());            cachePlayer = new SimpleExoPlayer.Builder(requireContext()).                    setTrackSelector(trackSelector)                    .setLoadControl(loadControl)                    .build();            DataSource.Factory dataSourceFactory = new DefaultDataSourceFactory(getActivity(),                    Util.getUserAgent(getActivity(), getActivity().getResources().getString(R.string.app_name)));            MediaSource videoSource = new ProgressiveMediaSource.Factory(dataSourceFactory)                    .createMediaSource(Uri.parse(proxyUrl));            cachePlayer.prepare(videoSource);            cachePlayer.addListener(new Player.EventListener() {                @Override                public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {                    if (playbackState == Player.STATE_READY) {                        i++;//                        callCache();                    }                }            });        }    }    @Override    public void onResume() {        super.onResume();    }    public boolean checkLocation() {        gpsTracker = new GpsTracker(getContext());        if (gpsTracker.canGetLocation()) {            viewModel.post_lat = gpsTracker.getLatitude();            viewModel.post_lng = gpsTracker.getLongitude();            return viewModel.post_lat != 0.0 && viewModel.post_lng != 0.0;        } else {            gpsTracker.showSettingsAlert();        }        return false;    }    private void handleShareClick(Video.Data model, int position, ItemVideoListBinding binding) {        ShareSheetFragment fragment = new ShareSheetFragment(binding, requireContext());        Bundle args = new Bundle();        args.putString("video", new Gson().toJson(model));        args.putInt("position", position);        fragment.setArguments(args);        fragment.show(getChildFragmentManager(), fragment.getClass().getSimpleName());    }}